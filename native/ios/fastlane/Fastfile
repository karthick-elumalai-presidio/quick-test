# Fastlane configuration for iOS CI/CD using App Store Connect API Key
# Documentation: https://docs.fastlane.tools

default_platform(:ios)

platform :ios do
  ##############################################
  # Setup
  ##############################################
  before_all do
    setup_ci if ENV['CI'] # Optimize Fastlane for CI
    UI.message("Starting iOS CI/CD Pipeline for CbMmobileapp")
  end

  ##############################################
  # Build (No Signing - for CI validation)
  ##############################################
  desc "Build iOS app without signing (for CI validation)"
  lane :build_ci do
    UI.message("Building iOS app for CI validation (no signing)...")
    gym(
      workspace: "CbM_mobile_app.xcworkspace",
      scheme: "CbM_mobile_app",
      configuration: "Release",
      skip_package_ipa: true,
      skip_archive: true,
      build_path: "build/ci",
      derived_data_path: "build/derived_data",
      xcargs: "CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO"
    )
    UI.success("iOS build completed successfully (CI validation)")
  end

  ##############################################
  # Build Debug (Development) IPA
  ##############################################
  desc "Build development-signed IPA (Debug)"
  lane :build_debug do
    UI.message("Building Debug IPA with Automatic Code Signing...")
    build_app(
      workspace: "CbM_mobile_app.xcworkspace",
      scheme: "CbM_mobile_app",
      configuration: "Debug",
      export_method: "development",
      output_directory: "build/ios",
      output_name: "debug.ipa",
      team_id: ENV['APPLE_TEAM_ID'],
      xcargs: "DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']} CODE_SIGN_STYLE=Automatic"
    )
  end

  ##############################################
  # Build App Store (Release) IPA
  ##############################################
  desc "Build App Store (Release) IPA for upload"
  lane :build_appstore_ipa do
    begin
      if ENV['APPLE_TEAM_ID'] && !ENV['APPLE_TEAM_ID'].empty?
        UI.success("Using automatic code signing with Team ID: #{ENV['APPLE_TEAM_ID']}")

        update_code_signing_settings(
          path: "CbM_mobile_app.xcodeproj",
          use_automatic_signing: true,
          team_id: ENV['APPLE_TEAM_ID'],
          code_sign_identity: "",
          targets: ["CbM_mobile_app"],
          build_configurations: ["Release"]
        )
      else
        UI.user_error!("APPLE_TEAM_ID not set - please define it in GitHub Secrets")
      end

      build_app(
        workspace: "CbM_mobile_app.xcworkspace",
        scheme: "CbM_mobile_app",
        configuration: "Release",
        export_method: "app-store",
        output_directory: "build/ios",
        output_name: "release.ipa",
        export_options: {
          method: "app-store",
          teamID: ENV['APPLE_TEAM_ID'],
          signingStyle: "automatic",
          uploadBitcode: false,
          uploadSymbols: true,
          compileBitcode: false
        },
        xcargs: "DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']} CODE_SIGN_STYLE=Automatic"
      )

      UI.success("iOS Release IPA successfully built at build/ios/release.ipa")
    rescue => ex
      UI.error("iOS build failed: #{ex.message}")
      raise ex
    end
  end

  ##############################################
  # Upload to TestFlight (Dev/QA)
  ##############################################
  desc "Upload built IPA to TestFlight"
  lane :upload_testflight_ipa do |options|
    ipa_path = options[:ipa] || "build/ios/release.ipa"
    UI.message("Preparing to upload IPA to TestFlight...")

    if ENV['APP_STORE_CONNECT_API_KEY_JSON']
      UI.success("Using App Store Connect API Key for authentication")
      key_json = JSON.parse(ENV['APP_STORE_CONNECT_API_KEY_JSON'])
      api_key = app_store_connect_api_key(
        key_id: key_json['key_id'],
        issuer_id: key_json['issuer_id'],
        key_content: key_json['key']
      )

      upload_to_testflight(
        ipa: ipa_path,
        api_key: api_key,
        skip_waiting_for_build_processing: true
      )
    elsif ENV['APPLE_ID'] && ENV['APPLE_APP_SPECIFIC_PASSWORD']
      UI.important("Using Apple ID credentials instead of API Key")
      upload_to_testflight(
        ipa: ipa_path,
        username: ENV['APPLE_ID'],
        password: ENV['APPLE_APP_SPECIFIC_PASSWORD'],
        skip_waiting_for_build_processing: true
      )
    else
      UI.user_error!("No authentication configured for TestFlight upload (missing APP_STORE_CONNECT_API_KEY_JSON or APPLE_ID creds)")
    end
  end

  ##############################################
  # Upload to App Store (Production)
  ##############################################
  desc "Upload existing IPA to App Store"
  lane :upload_appstore_ipa do |options|
    ipa_path = options[:ipa] || "build/ios/release.ipa"
    UI.message("Uploading IPA to App Store...")

    if ENV['APP_STORE_CONNECT_API_KEY_JSON']
      key_json = JSON.parse(ENV['APP_STORE_CONNECT_API_KEY_JSON'])
      api_key = app_store_connect_api_key(
        key_id: key_json['key_id'],
        issuer_id: key_json['issuer_id'],
        key_content: key_json['key']
      )

      upload_to_app_store(
        ipa: ipa_path,
        api_key: api_key,
        skip_metadata: true,
        skip_screenshots: true,
        submit_for_review: false
      )

      UI.success("IPA uploaded successfully to App Store (not submitted for review).")
    else
      UI.user_error!("APP_STORE_CONNECT_API_KEY_JSON missing - required for App Store upload.")
    end
  end
end
